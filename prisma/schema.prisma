generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Users
model User {
  id          String   @id @default(cuid())
  name        String
  email       String
  image       String
  cart        Json     @default("{}")
  ratings     Rating[]
  addresses   Address[]
  store       Store?
  buyerOrders Order[]  @relation("BuyerRelation")
}

// Products
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  mrp         Float
  price       Float
  images      String[]
  category    String
  inStock     Boolean     @default(true)
  storeId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  ratings    Rating[]
}

// Order Status
enum OrderStatus {
  ORDER_PLACED
  PROCESSING
  SHIPPED
  DELIVERED
}

// Payment Method
enum PaymentMethod {
  COD
  STRIPE
}

// Orders
model Order {
  id           String        @id @default(cuid())
  total        Float
  status       OrderStatus   @default(ORDER_PLACED)
  userId       String
  storeId      String
  addressId    String
  isPaid       Boolean       @default(false)
  paymentMethod PaymentMethod
  isCouponUsed Boolean       @default(false)
  coupon       Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderItems   OrderItem[]

  user    User    @relation("BuyerRelation", fields: [userId], references: [id])
  store   Store   @relation(fields: [storeId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
}

// Order Items
model OrderItem {
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

// Ratings
model Rating {
  id        String   @id @default(cuid())
  rating    Int
  review    String
  userId    String
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, orderId])
}

// Addresses
model Address {
  id        String   @id @default(cuid())
  userId    String
  name      String
  email     String
  street    String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  createdAt DateTime @default(now())

  orders Order[]
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Coupons
model Coupon {
  code       String   @id
  description String
  discount   Float
  forNewUser Boolean
  forMember  Boolean   @default(false)
  isPublic   Boolean
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
}

// Stores
model Store {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  username    String   @unique
  email       String
  contact     String
  logo        String
  description String
  address     String
  status      String   @default("pending")
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  orders   Order[]
  user     User     @relation(fields: [userId], references: [id])
}
